import PDFDocument from "pdfkit";
import fs from "fs";
import path from "path";

// Format Indian currency
const formatCurrency = (amount) => `â‚¹${amount.toFixed(2)}`;

async function generateInvoice(order, outputPath) {
    const doc = new PDFDocument({ size: "A4", margin: 50 });

    const logoPath = path.join("./logo.png");

    doc.pipe(fs.createWriteStream(outputPath));

    // ======= HEADER =======
    if (fs.existsSync(logoPath)) {
        doc.image(logoPath, 50, 30, { width: 120 }); // Increased logo size
    }
    doc
        .fontSize(24)
        .fillColor("#333")
        .text("Agrimitra Invoice", 200, 40, { align: "right" }) // Align header to the right
        .moveDown();

    doc
        .fontSize(12)
        .fillColor("#666")
        .text(`Invoice Date: ${new Date(order.createdAt).toLocaleDateString()}`, 200, 70, { align: "right" })
        .moveDown();

    // ======= CUSTOMER DETAILS =======
    const delivery = order.deliveryInfo;
    doc
        .moveDown(2)
        .fontSize(14)
        .fillColor("#333")
        .text("Invoice To:", 50, 120)
        .moveDown(0.5)
        .fontSize(12)
        .fillColor("#555")
        .text(`Name: ${delivery.fullName}`)
        .text(`Phone: ${delivery.phone}`)
        .text(`Address: ${delivery.address}, ${delivery.city}, ${delivery.state} - ${delivery.pincode}`)
        .moveDown();

    // ======= TABLE HEADERS =======
    const tableStartY = doc.y + 20;
    doc
        .fontSize(12)
        .fillColor("#333")
        .text("Item", 50, tableStartY, { width: 150 })
        .text("Category", 200, tableStartY, { width: 100, align: "center" })
        .text("Quantity", 300, tableStartY, { width: 100, align: "center" })
        .text("Price", 400, tableStartY, { width: 100, align: "center" });

    doc
        .moveTo(50, tableStartY + 15)
        .lineTo(550, tableStartY + 15)
        .stroke("#ddd"); // Add a light line for separation

    // ======= TABLE ROWS =======
    let currentY = tableStartY + 25;
    let subtotal = 0;

    order.orderItems.forEach((item) => {
        const product = item.productDetails;
        const totalPrice = product.price * item.quantity;
        subtotal += totalPrice;

        doc
            .fontSize(12)
            .fillColor("#555")
            .text(product.farmName || "N/A", 50, currentY, { width: 150 })
            .text(product.category || "N/A", 200, currentY, { width: 100, align: "center" })
            .text(`${item.quantity} ${product.unitOfSize}`, 300, currentY, { width: 100, align: "center" })
            .text(formatCurrency(totalPrice), 400, currentY, { width: 100, align: "center" });

        currentY += 30; // Added spacing between rows to avoid overlapping
    });

    // ======= PRICE SUMMARY =======
    const fixedShippingPrice = 100; // Fixed shipping price
    const tax = subtotal * 0.18; // 18% GST
    let calculatedTotal = subtotal + tax + fixedShippingPrice; // Total before adjustment
    const shippingPrice = order.shippingPrice || 0; // Final price paid by the user
    const adjustment = shippingPrice - calculatedTotal; // Adjustment to match the final price

    doc
        .moveDown(2)
        .fontSize(12)
        .fillColor("#333")
        .text(`Subtotal: ${formatCurrency(subtotal)}`, { align: "right" })
        .text(`Tax (18% GST): ${formatCurrency(tax)}`, { align: "right" })
        .text(`Shipping Price: ${formatCurrency(fixedShippingPrice)}`, { align: "right" })
        .text(`Adjustment: ${formatCurrency(adjustment)}`, { align: "right" }) // Adjustment to match the total
        .text(`Total: ${formatCurrency(shippingPrice)}`, { align: "right", underline: true }) // Final total
        .moveDown(2);

    // ======= TERMS & CONDITIONS =======
    const pageHeight = doc.page.height; // Get the page height
    const bottomMargin = 70; // Adjusted bottom margin for better spacing
    const termsStartY = pageHeight - bottomMargin - 100; // Position above the footer

    doc
        .fontSize(10)
        .fillColor("#666")
        .text("Terms & Conditions", 50, termsStartY, { underline: true })
        .moveDown(0.5)
        .text("1. This invoice is generated by Agrimitra.", 50, termsStartY + 15)
        .text("2. Goods once sold will not be taken back or exchanged.", 50, termsStartY + 30)
        .text("3. Please ensure to verify all product details on delivery.", 50, termsStartY + 45)
        .text("4. For support, contact us at support@agrimitra.in", 50, termsStartY + 60);

    // ======= FOOTER =======
    doc
        .fontSize(10)
        .fillColor("#aaa")
        .text("Thank you for shopping with Agrimitra!", 50, pageHeight - bottomMargin, { align: "center" });

    doc.end();
}

export { generateInvoice };